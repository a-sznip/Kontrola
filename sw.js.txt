const CACHE_NAME = 'kontrole-v3'; // WAŻNA ZMIANA: Zwiększona wersja, aby zaktualizować zawartość

const urlsToCache = [
  '/',
  'index.html', // Główny plik HTML
  'manifest.json.txt', // Nazwa manifestu z rozszerzeniem .txt
  'sw.js.txt', // Nazwa Service Workera z rozszerzeniem .txt
  
  // Pliki ikon
  'android-chrome-192x192.png',
  'android-chrome-512x512.jpg',
  
  // Zewnętrzne biblioteki (dla pełnego offline)
  'https://cdn.tailwindcss.com',
  'https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js',
  'https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js',
  'https://cdn.jsdelivr.net/npm/signature_pad@4.1.7/dist/signature_pad.umd.min.js',
  'https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&display=swap'
];

self.addEventListener('install', event => {
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then(cache => {
        console.log('Opened cache');
        return cache.addAll(urlsToCache);
      })
  );
});

self.addEventListener('fetch', event => {
  // Strategia Cache, then Network (pobierz z cache, w tle sprawdź sieć i zaktualizuj cache)
  event.respondWith(
    caches.match(event.request)
      .then(response => {
        // Zwróć z bufora, jeśli znaleziono
        if (response) {
          return response;
        }
        
        // Jeśli nie znaleziono w buforze, idź do sieci
        return fetch(event.request).then(
          function(response) {
            // Sprawdzanie, czy otrzymaliśmy prawidłową odpowiedź
            if(!response || response.status !== 200 || response.type !== 'basic') {
              return response;
            }

            // WAŻNE: Nie buforuj żądań POST ani zewnętrznych adresów
            if (event.request.method !== 'GET' || event.request.url.startsWith('chrome-extension')) {
                return response;
            }

            // Ważna uwaga: Klonowanie odpowiedzi jest potrzebne.
            // Odpowiedź jest strumieniem i może być użyta tylko raz.
            const responseToCache = response.clone();

            // Otwórz cache i dodaj nową odpowiedź
            caches.open(CACHE_NAME)
              .then(cache => {
                // Nie buforuj zapytań CORS (np. Google Fonts), które mają 'no-cors'
                // W tym przypadku jednak, dla wygody buforujemy wszystko z listy urlsToCache
                // Jeśli plik nie jest na liście, nie powinien być buforowany tu.
                // Uproszczona logika: buforuj tylko, jeśli jest na liście 'urlsToCache'
                // Ponieważ buforujesz też zewnętrzne zasoby (np. CDN), upewnij się, że to akceptujesz.
                
                // Dla zachowania prostoty, buforujemy tylko, jeśli jest to żądanie GET.
                // Można dodać bardziej skomplikowaną logikę buforowania, ale na razie trzymamy się tego.
                cache.put(event.request, responseToCache);
              });

            return response;
          }
        );
      })
      .catch(error => {
        // Obsługa błędów, np. gdy użytkownik jest offline i nie ma pliku w buforze
        console.error('Fetch error:', error);
        // Możesz tutaj zwrócić stronę awaryjną 'offline.html' jeśli ją utworzysz
        // return caches.match('offline.html');
      })
  );
});

self.addEventListener('activate', event => {
  // Usuń stare buforowane dane
  const cacheWhitelist = [CACHE_NAME];

  event.waitUntil(
    caches.keys().then(cacheNames => {
      return Promise.all(
        cacheNames.map(cacheName => {
          if (cacheWhitelist.indexOf(cacheName) === -1) {
            console.log('Deleting old cache:', cacheName);
            return caches.delete(cacheName);
          }
        })
      );
    })
  );
});